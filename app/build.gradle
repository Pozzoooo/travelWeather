apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.firebase.crashlytics'

apply from: '../scripts/jacoco.gradle'
apply from: '../scripts/keys.gradle'

android {
	compileSdkVersion 30

	defaultConfig {
		applicationId "pozzo.apps.travelweather"
		minSdkVersion 21
		targetSdkVersion 30
		versionCode 40
		versionName "1.6.2-SNAPSHOT"

		//todo Maybe I could use firebase to store my keys!
		def keys = getKeys('../../keystore/keys.properties')
		buildConfigField("String", "DIRECTIONS", "\"${keys.directions}\"")
		buildConfigField("String", "DARK_SKY", "\"${keys.darksky}\"")
		buildConfigField("String", "WEATHER_UNLOCKED", "\"${keys.weatherunlocked}\"")
		buildConfigField("String", "OPEN_WEATHER", "\"${keys.openweather}\"")

		archivesBaseName = ('travelWeather-' + android.defaultConfig.versionName
				+ '-' + android.defaultConfig.versionCode)
	}

	buildTypes {
		release {
			debuggable false
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		debug {
			debuggable true
			minifyEnabled false
			testCoverageEnabled true
		}
	}

	sourceSets {
		test.java.srcDirs += 'src/test/kotlin'
		main.java.srcDirs += 'src/main/kotlin'
	}

	dataBinding {
		enabled = true
	}
}

dependencies {
	//Google
	implementation "com.google.android.material:material:1.3.0"
	implementation 'androidx.lifecycle:lifecycle-runtime:2.3.1'
	implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
	implementation 'com.google.firebase:firebase-core:19.0.0'
	implementation "com.google.firebase:firebase-perf:20.0.1"
	implementation 'com.google.firebase:firebase-messaging:22.0.0'
	implementation 'com.google.android.gms:play-services-maps:17.0.1'
	implementation 'com.google.android.gms:play-services-location:18.0.0'
	implementation 'com.google.firebase:firebase-ads:20.2.0'
	implementation 'com.google.firebase:firebase-crashlytics:18.0.1'
	kapt 'androidx.lifecycle:lifecycle-compiler:2.3.1'

	//Web requests
	implementation 'com.squareup.retrofit2:retrofit:2.4.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

	//Custom libraries
	implementation 'com.github.pozzoooo:pozzotools:5243fc9a36'
	implementation 'com.github.faruktoptas:FancyShowCaseView:1.0.1'

	//Kotlin
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2"

	//di
	implementation 'com.google.dagger:dagger:2.28.3'
	kapt 'com.google.dagger:dagger-compiler:2.16'
	kaptTest 'com.google.dagger:dagger-compiler:2.16'

	//unit test
	testImplementation 'junit:junit:4.12'
	testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
	testImplementation "org.robolectric:robolectric:3.8"
	testImplementation 'androidx.arch.core:core-testing:2.1.0'
	testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7'
}

apply plugin: 'com.google.gms.google-services'
